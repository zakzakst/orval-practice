/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * „ÇÑ„Çã„Åì„Å® API
 * OpenAPI spec version: 1.0.0
 */

import { faker } from "@faker-js/faker";
import { delay, HttpResponse, http } from "msw";
import type { Arguments, Key, SWRConfiguration } from "swr";
import useSwr from "swr";
import type { SWRMutationConfiguration } from "swr/mutation";
import useSWRMutation from "swr/mutation";

export type TodoStatus = (typeof TodoStatus)[keyof typeof TodoStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TodoStatus = {
  done: "done",
  working: "working",
} as const;

export interface Todo {
  id?: number;
  name?: string;
  status?: TodoStatus;
}

export interface TodoInput {
  name?: string;
}

export interface ErrorResponse {
  message?: string;
}

export type GetTodosParams = {
  /**
   * „Éö„Éº„Ç∏Áï™Âè∑Ôºà1„ÅåÈñãÂßãÔºâ
   * @minimum 1
   */
  page?: number;
  /**
   * Number of todos per page
   * @minimum 1
   * @maximum 100
   */
  pageSize?: number;
};

export type GetTodos200 = {
  /** Total number of todos */
  total?: number;
  /** Current page number */
  page?: number;
  /** Number of todos per page */
  pageSize?: number;
  todos?: Todo[];
};

/**
 * @summary TODO„ÇíÂèñÂæó„Åô„Çã
 */
export type getTodosResponse200 = {
  data: GetTodos200;
  status: 200;
};

export type getTodosResponse500 = {
  data: ErrorResponse;
  status: 500;
};

export type getTodosResponseComposite =
  | getTodosResponse200
  | getTodosResponse500;

export type getTodosResponse = getTodosResponseComposite & {
  headers: Headers;
};

export const getGetTodosUrl = (params?: GetTodosParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/todos?${stringifiedParams}`
    : `/api/todos`;
};

export const getTodos = async (
  params?: GetTodosParams,
  options?: RequestInit,
): Promise<getTodosResponse> => {
  const res = await fetch(getGetTodosUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: getTodosResponse["data"] = body ? JSON.parse(body) : {};

  return { data, status: res.status, headers: res.headers } as getTodosResponse;
};

export const getGetTodosKey = (params?: GetTodosParams) =>
  [`/api/todos`, ...(params ? [params] : [])] as const;

export type GetTodosQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTodos>>
>;
export type GetTodosQueryError = Promise<ErrorResponse>;

/**
 * @summary TODO„ÇíÂèñÂæó„Åô„Çã
 */
export const useGetTodos = <TError = Promise<ErrorResponse>>(
  params?: GetTodosParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getTodos>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    fetch?: RequestInit;
  },
) => {
  const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetTodosKey(params) : null));
  const swrFn = () => getTodos(params, fetchOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Create a new todo
 */
export type createTodoResponse201 = {
  data: Todo;
  status: 201;
};

export type createTodoResponseComposite = createTodoResponse201;

export type createTodoResponse = createTodoResponseComposite & {
  headers: Headers;
};

export const getCreateTodoUrl = () => {
  return `/api/todos`;
};

export const createTodo = async (
  todoInput: TodoInput,
  options?: RequestInit,
): Promise<createTodoResponse> => {
  const res = await fetch(getCreateTodoUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(todoInput),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: createTodoResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as createTodoResponse;
};

export const getCreateTodoMutationFetcher = (options?: RequestInit) => {
  return (_: Key, { arg }: { arg: TodoInput }): Promise<createTodoResponse> => {
    return createTodo(arg, options);
  };
};
export const getCreateTodoMutationKey = () => [`/api/todos`] as const;

export type CreateTodoMutationResult = NonNullable<
  Awaited<ReturnType<typeof createTodo>>
>;
export type CreateTodoMutationError = Promise<unknown>;

/**
 * @summary Create a new todo
 */
export const useCreateTodo = <TError = Promise<unknown>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof createTodo>>,
    TError,
    Key,
    TodoInput,
    Awaited<ReturnType<typeof createTodo>>
  > & { swrKey?: string };
  fetch?: RequestInit;
}) => {
  const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getCreateTodoMutationKey();
  const swrFn = getCreateTodoMutationFetcher(fetchOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Delete a todo by ID
 */
export type deleteTodoResponse204 = {
  data: null;
  status: 204;
};

export type deleteTodoResponseComposite = deleteTodoResponse204;

export type deleteTodoResponse = deleteTodoResponseComposite & {
  headers: Headers;
};

export const getDeleteTodoUrl = (id: number) => {
  return `/api/todos/${id}`;
};

export const deleteTodo = async (
  id: number,
  options?: RequestInit,
): Promise<deleteTodoResponse> => {
  const res = await fetch(getDeleteTodoUrl(id), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: deleteTodoResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as deleteTodoResponse;
};

export const getDeleteTodoMutationFetcher = (
  id: number,
  options?: RequestInit,
) => {
  return (_: Key, __: { arg: Arguments }): Promise<deleteTodoResponse> => {
    return deleteTodo(id, options);
  };
};
export const getDeleteTodoMutationKey = (id: number) =>
  [`/api/todos/${id}`] as const;

export type DeleteTodoMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTodo>>
>;
export type DeleteTodoMutationError = Promise<unknown>;

/**
 * @summary Delete a todo by ID
 */
export const useDeleteTodo = <TError = Promise<unknown>>(
  id: number,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof deleteTodo>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof deleteTodo>>
    > & { swrKey?: string };
    fetch?: RequestInit;
  },
) => {
  const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getDeleteTodoMutationKey(id);
  const swrFn = getDeleteTodoMutationFetcher(id, fetchOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export const getGetTodosResponseMock = (
  overrideResponse: Partial<GetTodos200> = {},
): GetTodos200 => ({
  total: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  page: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  pageSize: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  todos: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      name: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
      status: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["done", "working"] as const),
        undefined,
      ]),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getCreateTodoResponseMock = (
  overrideResponse: Partial<Todo> = {},
): Todo => ({
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  name: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  status: faker.helpers.arrayElement([
    faker.helpers.arrayElement(["done", "working"] as const),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetTodosMockHandler = (
  overrideResponse?:
    | GetTodos200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetTodos200> | GetTodos200),
) => {
  return http.get("*/todos", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetTodosResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getCreateTodoMockHandler = (
  overrideResponse?:
    | Todo
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<Todo> | Todo),
) => {
  return http.post("*/todos", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateTodoResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteTodoMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.delete("*/todos/:id", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};
export const getApiMock = () => [
  getGetTodosMockHandler(),
  getCreateTodoMockHandler(),
  getDeleteTodoMockHandler(),
];
