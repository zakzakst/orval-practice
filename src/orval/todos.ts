/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Todos API
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import useSwr from 'swr';
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr';

import useSWRMutation from 'swr/mutation';
import type {
  SWRMutationConfiguration
} from 'swr/mutation';

import {
  faker
} from '@faker-js/faker';

import {
  HttpResponse,
  delay,
  http
} from 'msw';

export interface Todo {
  id?: number;
  name?: string;
}

export interface TodoInput {
  name?: string;
}

export interface ErrorResponse {
  message?: string;
}

export type GetTodosParams = {
/**
 * Page number (starting from 1)
 * @minimum 1
 */
page?: number;
/**
 * Number of todos per page
 * @minimum 1
 * @maximum 100
 */
pageSize?: number;
};

export type GetTodos200 = {
  /** Total number of todos */
  total?: number;
  /** Current page number */
  page?: number;
  /** Number of todos per page */
  pageSize?: number;
  todos?: Todo[];
};

/**
 * @summary Get all todos
 */
export const getTodos = (
    params?: GetTodosParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetTodos200>> => {
    return axios.get(
      `/api/todos`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getGetTodosKey = (params?: GetTodosParams,) => [`/api/todos`, ...(params ? [params]: [])] as const;

export type GetTodosQueryResult = NonNullable<Awaited<ReturnType<typeof getTodos>>>
export type GetTodosQueryError = AxiosError<ErrorResponse>

/**
 * @summary Get all todos
 */
export const useGetTodos = <TError = AxiosError<ErrorResponse>>(
  params?: GetTodosParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getTodos>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetTodosKey(params) : null);
  const swrFn = () => getTodos(params, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Create a new todo
 */
export const postTodos = (
    todoInput: TodoInput, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<Todo>> => {
    return axios.post(
      `/api/todos`,
      todoInput,options
    );
  }



export const getPostTodosMutationFetcher = ( options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: TodoInput }): Promise<AxiosResponse<Todo>> => {
    return postTodos(arg, options);
  }
}
export const getPostTodosMutationKey = () => [`/api/todos`] as const;

export type PostTodosMutationResult = NonNullable<Awaited<ReturnType<typeof postTodos>>>
export type PostTodosMutationError = AxiosError<unknown>

/**
 * @summary Create a new todo
 */
export const usePostTodos = <TError = AxiosError<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postTodos>>, TError, Key, TodoInput, Awaited<ReturnType<typeof postTodos>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostTodosMutationKey();
  const swrFn = getPostTodosMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Delete a todo by ID
 */
export const deleteTodosId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<null>> => {
    return axios.delete(
      `/api/todos/${id}`,options
    );
  }



export const getDeleteTodosIdMutationFetcher = (id: number, options?: AxiosRequestConfig) => {
  return (_: Key, __: { arg: Arguments }): Promise<AxiosResponse<null>> => {
    return deleteTodosId(id, options);
  }
}
export const getDeleteTodosIdMutationKey = (id: number,) => [`/api/todos/${id}`] as const;

export type DeleteTodosIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTodosId>>>
export type DeleteTodosIdMutationError = AxiosError<unknown>

/**
 * @summary Delete a todo by ID
 */
export const useDeleteTodosId = <TError = AxiosError<unknown>>(
  id: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteTodosId>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteTodosId>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteTodosIdMutationKey(id);
  const swrFn = getDeleteTodosIdMutationFetcher(id, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}


export const getGetTodosResponseMock = (overrideResponse: Partial< GetTodos200 > = {}): GetTodos200 => ({total: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), page: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), pageSize: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), todos: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined])})), undefined]), ...overrideResponse})

export const getPostTodosResponseMock = (overrideResponse: Partial< Todo > = {}): Todo => ({id: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), name: faker.helpers.arrayElement([faker.string.alpha({length: {min: 10, max: 20}}), undefined]), ...overrideResponse})


export const getGetTodosMockHandler = (overrideResponse?: GetTodos200 | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GetTodos200> | GetTodos200)) => {
  return http.get('*/todos', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getGetTodosResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostTodosMockHandler = (overrideResponse?: Todo | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<Todo> | Todo)) => {
  return http.post('*/todos', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined
    ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse)
    : getPostTodosResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteTodosIdMockHandler = (overrideResponse?: null | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<null> | null)) => {
  return http.delete('*/todos/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}
export const getTodosAPIMock = () => [
  getGetTodosMockHandler(),
  getPostTodosMockHandler(),
  getDeleteTodosIdMockHandler()
]
