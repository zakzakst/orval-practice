/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * Users API
 * OpenAPI spec version: 1.0.0
 */

import { faker } from "@faker-js/faker";
import { delay, HttpResponse, http } from "msw";
import type { Arguments, Key, SWRConfiguration } from "swr";
import useSwr from "swr";
import type { SWRMutationConfiguration } from "swr/mutation";
import useSWRMutation from "swr/mutation";

export interface User {
  id?: number;
  name?: string;
}

export interface UserInput {
  name?: string;
}

export interface ErrorResponse {
  message?: string;
}

export type GetUsersParams = {
  /**
   * Page number (starting from 1)
   * @minimum 1
   */
  page?: number;
  /**
   * Number of users per page
   * @minimum 1
   * @maximum 100
   */
  pageSize?: number;
};

export type GetUsers200 = {
  /** Total number of users */
  total?: number;
  /** Current page number */
  page?: number;
  /** Number of users per page */
  pageSize?: number;
  users?: User[];
};

/**
 * @summary Get all users
 */
export type getUsersResponse200 = {
  data: GetUsers200;
  status: 200;
};

export type getUsersResponse500 = {
  data: ErrorResponse;
  status: 500;
};

export type getUsersResponseComposite =
  | getUsersResponse200
  | getUsersResponse500;

export type getUsersResponse = getUsersResponseComposite & {
  headers: Headers;
};

export const getGetUsersUrl = (params?: GetUsersParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? "null" : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/api/users?${stringifiedParams}`
    : `/api/users`;
};

export const getUsers = async (
  params?: GetUsersParams,
  options?: RequestInit,
): Promise<getUsersResponse> => {
  const res = await fetch(getGetUsersUrl(params), {
    ...options,
    method: "GET",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: getUsersResponse["data"] = body ? JSON.parse(body) : {};

  return { data, status: res.status, headers: res.headers } as getUsersResponse;
};

export const getGetUsersKey = (params?: GetUsersParams) =>
  [`/api/users`, ...(params ? [params] : [])] as const;

export type GetUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getUsers>>
>;
export type GetUsersQueryError = Promise<ErrorResponse>;

/**
 * @summary Get all users
 */
export const useGetUsers = <TError = Promise<ErrorResponse>>(
  params?: GetUsersParams,
  options?: {
    swr?: SWRConfiguration<Awaited<ReturnType<typeof getUsers>>, TError> & {
      swrKey?: Key;
      enabled?: boolean;
    };
    fetch?: RequestInit;
  },
) => {
  const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

  const isEnabled = swrOptions?.enabled !== false;
  const swrKey =
    swrOptions?.swrKey ?? (() => (isEnabled ? getGetUsersKey(params) : null));
  const swrFn = () => getUsers(params, fetchOptions);

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(
    swrKey,
    swrFn,
    swrOptions,
  );

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Create a new user
 */
export type postUsersResponse201 = {
  data: User;
  status: 201;
};

export type postUsersResponseComposite = postUsersResponse201;

export type postUsersResponse = postUsersResponseComposite & {
  headers: Headers;
};

export const getPostUsersUrl = () => {
  return `/api/users`;
};

export const postUsers = async (
  userInput: UserInput,
  options?: RequestInit,
): Promise<postUsersResponse> => {
  const res = await fetch(getPostUsersUrl(), {
    ...options,
    method: "POST",
    headers: { "Content-Type": "application/json", ...options?.headers },
    body: JSON.stringify(userInput),
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: postUsersResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as postUsersResponse;
};

export const getPostUsersMutationFetcher = (options?: RequestInit) => {
  return (_: Key, { arg }: { arg: UserInput }): Promise<postUsersResponse> => {
    return postUsers(arg, options);
  };
};
export const getPostUsersMutationKey = () => [`/api/users`] as const;

export type PostUsersMutationResult = NonNullable<
  Awaited<ReturnType<typeof postUsers>>
>;
export type PostUsersMutationError = Promise<unknown>;

/**
 * @summary Create a new user
 */
export const usePostUsers = <TError = Promise<unknown>>(options?: {
  swr?: SWRMutationConfiguration<
    Awaited<ReturnType<typeof postUsers>>,
    TError,
    Key,
    UserInput,
    Awaited<ReturnType<typeof postUsers>>
  > & { swrKey?: string };
  fetch?: RequestInit;
}) => {
  const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getPostUsersMutationKey();
  const swrFn = getPostUsersMutationFetcher(fetchOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

/**
 * @summary Delete a user by ID
 */
export type deleteUsersIdResponse204 = {
  data: null;
  status: 204;
};

export type deleteUsersIdResponseComposite = deleteUsersIdResponse204;

export type deleteUsersIdResponse = deleteUsersIdResponseComposite & {
  headers: Headers;
};

export const getDeleteUsersIdUrl = (id: number) => {
  return `/api/users/${id}`;
};

export const deleteUsersId = async (
  id: number,
  options?: RequestInit,
): Promise<deleteUsersIdResponse> => {
  const res = await fetch(getDeleteUsersIdUrl(id), {
    ...options,
    method: "DELETE",
  });

  const body = [204, 205, 304].includes(res.status) ? null : await res.text();
  const data: deleteUsersIdResponse["data"] = body ? JSON.parse(body) : {};

  return {
    data,
    status: res.status,
    headers: res.headers,
  } as deleteUsersIdResponse;
};

export const getDeleteUsersIdMutationFetcher = (
  id: number,
  options?: RequestInit,
) => {
  return (_: Key, __: { arg: Arguments }): Promise<deleteUsersIdResponse> => {
    return deleteUsersId(id, options);
  };
};
export const getDeleteUsersIdMutationKey = (id: number) =>
  [`/api/users/${id}`] as const;

export type DeleteUsersIdMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteUsersId>>
>;
export type DeleteUsersIdMutationError = Promise<unknown>;

/**
 * @summary Delete a user by ID
 */
export const useDeleteUsersId = <TError = Promise<unknown>>(
  id: number,
  options?: {
    swr?: SWRMutationConfiguration<
      Awaited<ReturnType<typeof deleteUsersId>>,
      TError,
      Key,
      Arguments,
      Awaited<ReturnType<typeof deleteUsersId>>
    > & { swrKey?: string };
    fetch?: RequestInit;
  },
) => {
  const { swr: swrOptions, fetch: fetchOptions } = options ?? {};

  const swrKey = swrOptions?.swrKey ?? getDeleteUsersIdMutationKey(id);
  const swrFn = getDeleteUsersIdMutationFetcher(id, fetchOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions);

  return {
    swrKey,
    ...query,
  };
};

export const getGetUsersResponseMock = (
  overrideResponse: Partial<GetUsers200> = {},
): GetUsers200 => ({
  total: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  page: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  pageSize: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  users: faker.helpers.arrayElement([
    Array.from(
      { length: faker.number.int({ min: 1, max: 10 }) },
      (_, i) => i + 1,
    ).map(() => ({
      id: faker.helpers.arrayElement([
        faker.number.int({
          min: undefined,
          max: undefined,
          multipleOf: undefined,
        }),
        undefined,
      ]),
      name: faker.helpers.arrayElement([
        faker.string.alpha({ length: { min: 10, max: 20 } }),
        undefined,
      ]),
    })),
    undefined,
  ]),
  ...overrideResponse,
});

export const getPostUsersResponseMock = (
  overrideResponse: Partial<User> = {},
): User => ({
  id: faker.helpers.arrayElement([
    faker.number.int({ min: undefined, max: undefined, multipleOf: undefined }),
    undefined,
  ]),
  name: faker.helpers.arrayElement([
    faker.string.alpha({ length: { min: 10, max: 20 } }),
    undefined,
  ]),
  ...overrideResponse,
});

export const getGetUsersMockHandler = (
  overrideResponse?:
    | GetUsers200
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<GetUsers200> | GetUsers200),
) => {
  return http.get("*/users", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetUsersResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getPostUsersMockHandler = (
  overrideResponse?:
    | User
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<User> | User),
) => {
  return http.post("*/users", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getPostUsersResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteUsersIdMockHandler = (
  overrideResponse?:
    | null
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<null> | null),
) => {
  return http.delete("*/users/:id", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 204 });
  });
};
export const getUsersAPIMock = () => [
  getGetUsersMockHandler(),
  getPostUsersMockHandler(),
  getDeleteUsersIdMockHandler(),
];
