/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Users API
 * OpenAPI spec version: 1.0.0
 */
import axios from 'axios';
import type {
  AxiosError,
  AxiosRequestConfig,
  AxiosResponse
} from 'axios';

import useSwr from 'swr';
import type {
  Arguments,
  Key,
  SWRConfiguration
} from 'swr';

import useSWRMutation from 'swr/mutation';
import type {
  SWRMutationConfiguration
} from 'swr/mutation';

export interface User {
  id?: number;
  name?: string;
}

export interface UserInput {
  name?: string;
}

export interface ErrorResponse {
  message?: string;
}

export type GetUsersParams = {
/**
 * Page number (starting from 1)
 * @minimum 1
 */
page?: number;
/**
 * Number of users per page
 * @minimum 1
 * @maximum 100
 */
pageSize?: number;
};

export type GetUsers200 = {
  /** Total number of users */
  total?: number;
  /** Current page number */
  page?: number;
  /** Number of users per page */
  pageSize?: number;
  users?: User[];
};

/**
 * @summary Get all users
 */
export const getUsers = (
    params?: GetUsersParams, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<GetUsers200>> => {
    return axios.get(
      `/api/users`,{
    ...options,
        params: {...params, ...options?.params},}
    );
  }



export const getGetUsersKey = (params?: GetUsersParams,) => [`/api/users`, ...(params ? [params]: [])] as const;

export type GetUsersQueryResult = NonNullable<Awaited<ReturnType<typeof getUsers>>>
export type GetUsersQueryError = AxiosError<ErrorResponse>

/**
 * @summary Get all users
 */
export const useGetUsers = <TError = AxiosError<ErrorResponse>>(
  params?: GetUsersParams, options?: { swr?:SWRConfiguration<Awaited<ReturnType<typeof getUsers>>, TError> & { swrKey?: Key, enabled?: boolean }, axios?: AxiosRequestConfig }
) => {
  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const isEnabled = swrOptions?.enabled !== false
  const swrKey = swrOptions?.swrKey ?? (() => isEnabled ? getGetUsersKey(params) : null);
  const swrFn = () => getUsers(params, axiosOptions)

  const query = useSwr<Awaited<ReturnType<typeof swrFn>>, TError>(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Create a new user
 */
export const postUsers = (
    userInput: UserInput, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<User>> => {
    return axios.post(
      `/api/users`,
      userInput,options
    );
  }



export const getPostUsersMutationFetcher = ( options?: AxiosRequestConfig) => {
  return (_: Key, { arg }: { arg: UserInput }): Promise<AxiosResponse<User>> => {
    return postUsers(arg, options);
  }
}
export const getPostUsersMutationKey = () => [`/api/users`] as const;

export type PostUsersMutationResult = NonNullable<Awaited<ReturnType<typeof postUsers>>>
export type PostUsersMutationError = AxiosError<unknown>

/**
 * @summary Create a new user
 */
export const usePostUsers = <TError = AxiosError<unknown>>(
   options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof postUsers>>, TError, Key, UserInput, Awaited<ReturnType<typeof postUsers>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getPostUsersMutationKey();
  const swrFn = getPostUsersMutationFetcher(axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}

/**
 * @summary Delete a user by ID
 */
export const deleteUsersId = (
    id: number, options?: AxiosRequestConfig
 ): Promise<AxiosResponse<null>> => {
    return axios.delete(
      `/api/users/${id}`,options
    );
  }



export const getDeleteUsersIdMutationFetcher = (id: number, options?: AxiosRequestConfig) => {
  return (_: Key, __: { arg: Arguments }): Promise<AxiosResponse<null>> => {
    return deleteUsersId(id, options);
  }
}
export const getDeleteUsersIdMutationKey = (id: number,) => [`/api/users/${id}`] as const;

export type DeleteUsersIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteUsersId>>>
export type DeleteUsersIdMutationError = AxiosError<unknown>

/**
 * @summary Delete a user by ID
 */
export const useDeleteUsersId = <TError = AxiosError<unknown>>(
  id: number, options?: { swr?:SWRMutationConfiguration<Awaited<ReturnType<typeof deleteUsersId>>, TError, Key, Arguments, Awaited<ReturnType<typeof deleteUsersId>>> & { swrKey?: string }, axios?: AxiosRequestConfig}
) => {

  const {swr: swrOptions, axios: axiosOptions} = options ?? {}

  const swrKey = swrOptions?.swrKey ?? getDeleteUsersIdMutationKey(id);
  const swrFn = getDeleteUsersIdMutationFetcher(id, axiosOptions);

  const query = useSWRMutation(swrKey, swrFn, swrOptions)

  return {
    swrKey,
    ...query
  }
}
