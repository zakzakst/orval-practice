openapi: 3.1.0
info:
  title: My App API
  version: 1.0.0
paths:
  /todos:
    get:
      summary: TODOを取得する
      parameters:
        - name: page
          in: query
          description: ページ番号（1が開始）
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          description: Number of todos per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: A paginated list of todos
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: Total number of todos
                  page:
                    type: integer
                    description: Current page number
                  pageSize:
                    type: integer
                    description: Number of todos per page
                  todos:
                    type: array
                    items:
                      $ref: '#/components/schemas/Todo'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new todo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TodoInput'
      responses:
        '201':
          description: Todo created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
  /todos/{id}:
    delete:
      summary: Delete a todo by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Todo deleted
  /users:
    get:
      summary: Get all users
      parameters:
        - name: page
          in: query
          description: Page number (starting from 1)
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: pageSize
          in: query
          description: Number of users per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: A paginated list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: Total number of users
                  page:
                    type: integer
                    description: Current page number
                  pageSize:
                    type: integer
                    description: Number of users per page
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInput'
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    delete:
      summary: Delete a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted
  /schedules:
    get:
      operationId: getSchedules
      summary: スケジュール情報一覧を取得する
      parameters:
        - name: page
          in: query
          description: ページ番号（1からスタート）
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: size
          in: query
          description: ページあたりのスケジュール数
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: 取得成功
          content:
            application/json:
              schema:
                type: object
                properties:
                  total:
                    type: integer
                    description: スケジュールの総数
                  page:
                    type: integer
                    description: 現在のページ番号
                  size:
                    type: integer
                    description: ページあたりのスケジュール数
                  schedules:
                    type: array
                    items:
                      $ref: '#/components/schemas/Schedule'
        '500':
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /schedules/{id}:
    get:
      operationId: getSchedule
      summary: 対象のスケジュール情報を取得する
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 取得成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '404':
          description: 対象のスケジュールが存在しない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      operationId: updateSchedule
      summary: 対象のスケジュールを更新する
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  format: date
                title:
                  type: string
                detail:
                  type: string
      responses:
        '200':
          description: 更新成功
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '404':
          description: 対象のスケジュールが存在しない
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: サーバーエラー
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    Todo:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        status:
          type: string
          enum:
            - done
            - working
    TodoInput:
      type: object
      properties:
        name:
          type: string
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
      example:
        message: エラーが発生しました
    User:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
    UserInput:
      type: object
      properties:
        name:
          type: string
    Schedule:
      type: object
      properties:
        id:
          type: string
        date:
          type: string
          format: date
        title:
          type: string
        detail:
          type: string
          format: markdown
      required:
        - id
        - date
        - title
        - detail
      example:
        id: abc123
        date: '2025-09-16'
        title: 定例会議
        detail: |-
          # 議題
          - 来週のリリース手順について認識合わせ
          - 各メンバーの作業進捗確認
